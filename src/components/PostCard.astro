---
interface Props {
  imageUrl: string;
  title: string;
  category: string;
  description: string;
  url?: string;
  size?: string;
  featured?: boolean;
}

const { imageUrl, title, category, description, url, size = "1", featured = false } = Astro.props;
---

<style>
  .sketch {
    padding: 1.23rem 1.23rem;
    width: 222px;
    height: 333px;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    box-sizing: border-box;
    border-radius: 6px;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.11);
    position: relative;
    isolation: isolate;
    filter: drop-shadow(0 0 20px var(--card-glow-color, rgba(0, 0, 0, 0.15)));
    margin: 8px;
    overflow: visible;
    transition: filter 0.3s ease;
  }

  .sketch::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--overlay-color, rgba(0, 0, 0, 0.3));
    border-radius: 6px;
    z-index: 1;
    transition: background-color 0.3s ease;
    mix-blend-mode: plus-darker;
  }

  .sketch::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.33) 0%, rgba(0, 0, 0, 0.22) 15%, rgba(0, 0, 0, 0.25) 30%, rgba(0, 0, 0, 0.15) 45%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0) 75%);
    border-radius: 6px;
    z-index: 2;
    pointer-events: none;
  }

  .sketch-info {
    position: relative;
    z-index: 3;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .sketch-info-top {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sketch p {
    font-family: "Times New Roman", Times, serif;
    font-style: italic;
    font-size: 2rem;
    font-weight: 222;
    color: var(--txtColorDark, var(--fallback-txt-color-dark));
    text-shadow: 1px 4px 8px rgba(0, 0, 0, 0.25);
    text-shadow: 1px 4px 8px color(display-p3 0 0 0 / 0.25);
    margin: 0;
  }

  em,
  a {
    text-decoration: none;
    color: var(--txtColorDark, var(--fallback-txt-color-dark));
  }

  a {
    display: inline-block;
    width: fit-content;
    height: fit-content;
  }

  em {
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.22);
  }

  @media (prefers-color-scheme: dark) {
    a, em {
      color: var(--txtColorDark, var(--fallback-txt-color-dark));
    }
  }
</style>

<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    function sampleImageColor(element: HTMLElement): void {
      const img = new Image();
      const bgImage = element.style.backgroundImage || 
        window.getComputedStyle(element).backgroundImage;
      
      if (!bgImage || bgImage === 'none') return;
      
      img.crossOrigin = "Anonymous";
      img.src = bgImage.replace(/url\(['"](.+)['"]\)/, "$1");

      img.onload = () => {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        if (!ctx) return;

        canvas.width = img.width;
        canvas.height = img.height;

        ctx.drawImage(img, 0, 0);

        try {
          // Sample the color from multiple points in the image for better results
          const points = [
            { x: Math.floor(canvas.width / 2), y: Math.floor(canvas.height / 2) },  // center
            { x: Math.floor(canvas.width / 4), y: Math.floor(canvas.height / 4) },  // top-left
            { x: Math.floor(canvas.width * 3/4), y: Math.floor(canvas.height / 4) } // top-right
          ];
          
          let avgR = 0, avgG = 0, avgB = 0;
          
          // Calculate average color from these points
          points.forEach(point => {
            const pixel = ctx.getImageData(point.x, point.y, 1, 1).data;
            avgR += pixel[0];
            avgG += pixel[1];
            avgB += pixel[2];
          });
          
          avgR = Math.floor(avgR / points.length);
          avgG = Math.floor(avgG / points.length);
          avgB = Math.floor(avgB / points.length);
          
          // Apply the sampled color with different opacities
          const overlayColor = `rgba(${avgR}, ${avgG}, ${avgB}, 0.4)`;
          element.style.setProperty("--overlay-color", overlayColor);
          
          // Boost the dominant color channel to create a more vibrant glow
          const maxValue = Math.max(avgR, avgG, avgB);
          let enhancedR = avgR, enhancedG = avgG, enhancedB = avgB;
          
          // If a color channel is the dominant one, boost it even more
          if (maxValue === avgR) enhancedR = Math.min(255, avgR * 1.5);
          if (maxValue === avgG) enhancedG = Math.min(255, avgG * 1.5);
          if (maxValue === avgB) enhancedB = Math.min(255, avgB * 1.5);
          
          // Create an intensified glow color
          const glowColor = `rgba(${enhancedR}, ${enhancedG}, ${enhancedB}, 0.25)`;
          element.style.setProperty("--card-glow-color", glowColor);
          
          // Add a second color for featured cards if applicable
          if (element.classList.contains('featured')) {
            const secondGlowColor = `rgba(${enhancedR}, ${enhancedG}, ${enhancedB}, 0.35)`;
            element.style.setProperty("--card-second-glow", secondGlowColor);
          }
        } catch (e) {
          console.error("Error sampling image color:", e);
        }
      };
      
      img.onerror = () => {
        console.error("Error loading image for color sampling");
      };
    }

    // Run on all sketch elements with a small delay to ensure styles are computed
    setTimeout(() => {
      document.querySelectorAll(".sketch").forEach(el => {
        if (el instanceof HTMLElement) {
          sampleImageColor(el);
        }
      });
    }, 100);
  });
</script>

{
  url && (
    <a href={url}>
      <div class={`sketch ${featured ? "featured" : ""}`} data-size={size} style={`background-image: url(${imageUrl}); --overlay-color: rgba(0, 0, 0, 0.3);`}>
        <div class="sketch-info">
          <div class="sketch-info-top">
            <p>{title}</p>
          </div>
          <em>{description}</em>
        </div>
      </div>
    </a>
  )
}
