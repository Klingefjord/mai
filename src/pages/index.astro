---
import Base from "../layouts/Base.astro";
import PostCard from "../components/PostCard.astro";
import { getCollection } from "astro:content";

const pageTitle = "Meaning Alignment Institute";

// Get blog posts from the writing collection
const allPosts = await getCollection("writing");

// Get people data from the people collection
const allPeople = await getCollection("people");

// Group people by category
const researchPeople = allPeople.filter((person) => person.data.category === "research");
const coreTeam = allPeople.filter((person) => person.data.category === "core");
const advisors = allPeople.filter((person) => person.data.category === "advisor");

// Sort posts by publication date (newest first)
const sortedPosts = allPosts.sort((a, b) => {
  const dateA = new Date(a.id.substring(0, 6));
  const dateB = new Date(b.id.substring(0, 6));
  return dateB.getTime() - dateA.getTime();
});

// Filter featured posts and non-featured posts
const pinnedPosts = sortedPosts.filter((post) => post.data.featured === true);
const remainingPosts = sortedPosts.filter((post) => !post.data.featured);
---

<Base pageTitle={pageTitle}>
  <!-- Title + Nav Section -->
  <header>
    <p><a href="/">Meaning Alignment Institute</a></p>
    <h1>AI, markets, and democracies aligned with what truly matters.</h1>
  </header>

  <div class="content-grid">
    <!-- Research + Writing Section -->
    <section>
      <h2 class="section-header">Research and Writing</h2>
      <div class="section-content">
        <p>
          Stay up to date, subscribe on <a href="https://meaningalignment.substack.com">Substack</a>.
        </p>
      </div>
      <div class="post-scroll-container">
        <div class="post-scroll">
          {pinnedPosts.map((post) => <PostCard imageUrl={post.data.coverImg || "/src/assets/covers/full-stack-alignment.png"} title={post.data.title} description={post.data.description} category="Featured" url={`/writing/${post.id}/`} featured={true} />)}
          {remainingPosts.map((post) => <PostCard imageUrl={post.data.coverImg || "/src/assets/covers/full-stack-alignment.png"} title={post.data.title} description={post.data.description} category="&nbsp" url={`/writing/${post.id}/`} />)}
          <!-- {remainingPosts.map((post) => <PostCard imageUrl={post.data.coverImg || "/src/assets/covers/full-stack-alignment.png"} title={post.data.title} category={post.data.description} url={`/writing/${post.id}/`} />)} -->
        </div>
      </div>
    </section>

    <!-- About + Organization Section -->
    <section>
      <h2 class="section-header">About</h2>
      <div class="section-content">
        <p>
          The Meaning Alignment Institute aligns AI, markets, and democracies with what makes life meaningful â€” we call <a href="/writing/full-stack-alignment">Full-Stack Alignment</a>.
        </p>
        <p>
          Collaborating with 30+ experts, we advance Full-Stack Alignment from theory to practice. We're a non-profit supported by ARIA, <a href="https://openai.com">OpenAI</a>, <a href="https://survivalandflourishing.fund">SFF</a>, and others.
        </p>
        <p>
          Want to help? Reach us at <a href="mailto:hello@meaningalignment.org">hello@meaningalignment.org</a>
        </p>

        <h3>Research Network</h3>
        <ul class="people-list research-network">
          {researchPeople.map((person) => <li data-person-id={person.id}>{person.data.name}</li>)}
        </ul>

        <div class="two-column">
          <div>
            <h3>Core Team</h3>
            <ul class="people-list core-team">
              {coreTeam.map((person) => <li data-person-id={person.id}>{person.data.name}</li>)}
            </ul>
          </div>
          <div>
            <h3>Advisors</h3>
            <ul class="people-list advisors">
              {advisors.map((person) => <li data-person-id={person.id}>{person.data.name}</li>)}
            </ul>
          </div>
        </div>
      </div>
    </section>

    <!-- Contact + Socials Section -->
    <section>
      <h2 class="section-header">Contact</h2>
      <div class="section-content">
        <h3>Interested in collaborating with us?</h3>
        <p>
          <a href="mailto:research@meaningalignment.org">research@meaningalignment.org</a>
        </p>

        <h3>General Inquiry</h3>
        <p>
          <a href="mailto:hello@meaningalignment.org">hello@meaningalignment.org</a>
        </p>

        <h3>Follow us elsewhere</h3>
        <p>
          <a href="https://meaningalignment.substack.com">Substack</a><br />
          <a href="https://x.com/meaningaligned">X</a>
        </p>

        <ul class="locations-list">
          <li>Berlin, Germany</li>
          <li>San Francisco, United States</li>
        </ul>
      </div>
    </section>
  </div>

  <!-- On-hover info box -->
  <div class="hover-info-square" id="hoverInfoSquare">
    <img id="hoverPortrait" src="" alt="" />
    <div class="hover-info-content">
      <h4 id="hoverName"></h4>
      <p id="hoverRole"></p>
      <p id="hoverBio"></p>
    </div>
  </div>
</Base>

<script define:vars={{ allPeople }}>
  // Prevent browser back navigation on horizontal scroll
  document.addEventListener("DOMContentLoaded", () => {
    const postScrolls = document.querySelectorAll(".post-scroll");

    postScrolls.forEach((scrollArea) => {
      let startX = 0;
      let isScrolling = false;

      // Track touch/mouse start position
      scrollArea.addEventListener(
        "touchstart",
        function (e) {
          startX = e.touches[0].clientX;
          isScrolling = true;
        },
        { passive: false }
      );

      scrollArea.addEventListener("mousedown", function (e) {
        startX = e.clientX;
        isScrolling = true;
      });

      // Handle touch move
      scrollArea.addEventListener(
        "touchmove",
        function (e) {
          if (!isScrolling) return;

          const touchX = e.touches[0].clientX;
          const scrollLeft = scrollArea.scrollLeft;

          // If at the left edge and trying to scroll further left
          if (scrollLeft <= 0 && touchX > startX) {
            e.preventDefault(); // Prevent the browser back navigation
          }
        },
        { passive: false }
      );

      // Reset on end of interaction
      const endScroll = function () {
        isScrolling = false;
      };

      scrollArea.addEventListener("touchend", endScroll);
      scrollArea.addEventListener("mouseup", endScroll);
      scrollArea.addEventListener("mouseleave", endScroll);

      // Also prevent wheel overscroll
      scrollArea.addEventListener(
        "wheel",
        function (e) {
          const scrollLeft = scrollArea.scrollLeft;

          // If at the left edge and trying to scroll further left with wheel
          if (scrollLeft <= 0 && e.deltaX < 0) {
            e.preventDefault();
          }
        },
        { passive: false }
      );
    });

    // Block history navigation from swipe gestures
    window.addEventListener("popstate", function (e) {
      // Check if the navigation was triggered by a gesture from our scroll area
      if (e.isTrusted && document.activeElement?.closest(".post-scroll-container, .post-scroll")) {
        history.pushState("", "", window.location.href);
      }
    });

    // Enhanced hover interaction for people lists
    const personItems = document.querySelectorAll(".research-network li, .core-team li, .advisors li");
    const hoverSquare = document.getElementById("hoverInfoSquare");
    const hoverName = document.getElementById("hoverName");
    const hoverRole = document.getElementById("hoverRole");
    const hoverBio = document.getElementById("hoverBio");
    const hoverPortrait = document.getElementById("hoverPortrait");
    let hideTimeout;

    // Create a map for quick lookup
    const peopleMap = {};
    if (allPeople) {
      allPeople.forEach((person) => {
        peopleMap[person.id] = person.data;
      });
    }

    personItems.forEach((item) => {
      item.addEventListener("mouseenter", () => {
        clearTimeout(hideTimeout);

        const personId = item.getAttribute("data-person-id");
        if (personId && peopleMap[personId]) {
          const personData = peopleMap[personId];

          hoverName.textContent = personData.name;
          hoverRole.textContent = personData.role;
          hoverBio.textContent = personData.bio;

          if (personData.portrait) {
            hoverPortrait.src = personData.portrait;
            hoverPortrait.alt = `Portrait of ${personData.name}`;
            hoverPortrait.style.display = "block";
          } else {
            hoverPortrait.style.display = "none";
          }
        } else {
          // Fallback for legacy items without data
          hoverName.textContent = item.textContent.trim();
          hoverRole.textContent = "";
          hoverBio.textContent = "";
          hoverPortrait.style.display = "none";
        }

        hoverSquare.classList.add("active");
        hoverSquare.classList.remove("fade-out");
      });

      item.addEventListener("mouseleave", () => {
        hoverSquare.classList.add("fade-out");
        hideTimeout = setTimeout(() => {
          hoverSquare.classList.remove("active");
        }, 128);
      });
    });
  });
</script>
